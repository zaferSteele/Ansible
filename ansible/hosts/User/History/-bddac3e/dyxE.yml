- name: Upgrade Cisco IOS-XE Routers
  hosts: ios_xe_routers
  gather_facts: true 
  vars_files: vars.yml # read vars.yml for variables
  max_fail_percentage: 0 # If any host fails. the application will exit, in percentage

  tasks:
  - name: Check current IOS-XE version from gathered IOS facts
    ios_facts:

  - name: Debug current and new IOS versions
    ansible.builtin.debug:
      msg:
        - "Current version: {{ ansible_net_version }}" # Informational
        - "New version    : {{ new_ios_version }}" # Informational
  
  - name: Quit playbook if ansible_net_version equals new_ios_version
    block:
      - name: Fail if versions are equal or current IOS is newer
        ansible.builtin.fail:
          msg: "Current IOS version is already up to date."
        when: ansible_net_version <= new_ios_version
  
      - name: Debug Message
        ansible.builtin.debug:
          msg: "Continuing with the playbook, upgrading IOS version..."
        ignore_errors: true
  
- name: Create directories on the SFTP server
  hosts: scp_server1

  tasks:
  - name: Get ansible date/time facts
    ansible.builtin.setup:
      filter: "ansible_date_time"
      gather_subset: "!all"
    
  - name: Store DTG as a fact
    ansible.builtin.set_fact:
       DTG: "{{ ansible_date_time.date }}"

  - name: Create Directory for backup
    ansible.builtin.file:
      path: "~/{{ DTG }}" # /home/user/2025-05-05
      state: directory
      mode: "0775"
    run_once: true
  
- name: Copy the running configuration
  hosts: ios_xe_routers
  gather_facts: false
  vars_files: vars.yml
  
  vars:
    file_name: "/home/user/{{  hostvars['scp_server1'].DTG }}/{{ inventory_hostname }}"
    command_timeout: 600
  
  tasks:
    - name: Copy running configuration
      ansible.netcommon.cli_command:
        command: "copy running-config sftp://{{ sftp_username }}:{{ sftp_password }}@{{ sftp_server_ip }}/{{ file_name }}"
        check_all: True
        prompt:
          - 'Address or name of remote host'
          - 'Destination username'
          - 'Destination filename'
        answer:
          - '{{ sftp_server_ip }}'
          - '{{ sftp_username }}'
          - '{{ file_name }}'
      register: copy_result
    
    - name: Display copy result
      ansible.builtin.debug:
        var: copy_result

    - name: Save running-config to startup-config
      cisco.ios.ios_config:
        save_when: always
    
    - name: Extend SSH timer to 99mins
      cisco.ios.ios_config:
        commands:
        - line vty 0 15
        - exec-timeout 99 0
    
    - name: Copy new IOS from SFTP server 192.168.255.4
      ansible.netcommon.cli_command:
        command: 'copy sftp://{{ sftp_username }}:{{ sftp_password }}@{{ sftp_server_ip }}/{{ ios_file_name }} flash:/{{ ios_file_name }}'
        check_all: True
        prompt:
          - 'Destination filename'
        answer:
          - '{{ ios_file_name }}'
    
    - name: Verify MD5 value on the flash
      cisco.ios.ios_command:
        commands: verify /md5 flash:{{ ios_file_name }} {{ ios_file_md5 }
      register: ios_file_md5_flash_result
    
    - ansible.builtin.debug:
        var: ios_file_md5_flash_result.stdout

    - name: Locate MD5 value of new IOS on router flash
      ansible.builtin.set_fact:
        ios_file_md5_flash: "{{ ios_file_md5_flash_result.stdout[0] | regex_search('[a-f0-9]{32}')}}"
    
    - ansible.builtin.debug:
        msg:

        - "ios_file_md5 [flash:/] : {{ ios_file_md5_flash }}"
        - "ios_file_md5 [Correct] : {{ ios_file_md5 }}"

    - name: Fail if MD5 Values are different
      ansible.builtin.fail: 
        msg: "Failed, flash IOS MD5 value DOES NOT MATCH the correct IOS file MD5 value."
      when: ios_file_md5_flash != ios_file_md5 or 'Verfied' not in ios_file_md5_flash_result.stdout[0]

    - name: Pass if MD5 values are the same
      ansible.builtin.debug:
        msg: Passed, flash IOS MD5 MATCH provided IOS file MD5.
      when: ios_file_md5_flash == ios_file_md5 and 'Verfied' in ios_file_md5_flash_result.stdout[0]
  
    - name: Clear the old boot variable
      cisco.ios.ios_config:
        commands:
        - "no boot system"
        save_when: always


    - name: Change the boot variable to a new IOS image (.bin)
      cisco.ios.ios_config:
        commands:
        - "boot system flash:{{ ios_file_name }}"
        save_when: always
    
    - name: Run show boot command
      cisco.ios.ios_command:
        commands: show boot
        wait_for:
          - result[0] contains "{{ new_ios_version }}"
      register: show_boot1
    
    - ansible.builtin.debug:
        var: show_boot1.stdout_lines
    
    - name: Save running-config to statup-config
      cisco.ios.ios_config:
        save_when: always
    
    - name: Reload the device
      cisco.ios.ios_command:
        commands:
          - command: "reload\r"
            prompt: 'Proceed with reload? [confirm]'
            answer: "\r"
    
    # - name: wait for the device to come back online
    #   ansible.builtin.wait_for:
    #     host: "{{ inventory_hostname }}"
    #     port: 22
    #     delay: 120
    #     timeout: 600
    #     state: started
    #   delegte_to: localhost

- name: Sleep for 5 minutes
  hosts: localhost
  gather_facts: false
  tasks:
  - name: Pause for 5 minutes
    ansible.builtin.pause:
      seconds: 300
    run_once: true
    
- name: Copy the running configuration
  hosts: ios_xe_routers
  gather_facts: false

  vars_files: vars.yml

  vars:
    file_name: "/home/user/{{ hostvars['scp_server1'].DTG }}/{{ inventory_hostname }}"
    command_timeout: 600
      
  tasks:
  - name: Restore SSH timer to default value, 10 mins
    cisco.ios.ios_config:
      commands:
      - line vty 0 15
      - exec-timeout 10 0
      save_when: modified

  - name: Copy running configuration
    ansible.netcommon.cli_command:
      command: "copy running-config sftp://{{ sftp_username }}:{{ sftp_password }}@{{ sftp_server_ip }}/{{ file_name }}"
      check_all: True
      prompt:
      - 'Address or name of remote host'
      - 'Destination username'
      - 'Destination filename'
      answer:
      - '{{ sftp_server_ip }}'
      - '{{ sftp_username }}'
      - '{{ file_name }}'
    register: copy_result
    
  - name: Display copy result
    ansible.builtin.debug:
      var: copy_result   
  
  - name: Check the new IOS version
    cisco.ios.ios_facts:

  - ansible.builtin.debug:
      msg:
        - "Current version is {{ ansible_net_version }}"
  
  - name: Assert that the new ios version is correct.
    vars:
      NEW_IOS_VERSION: "{{ new_ios_version }}"
    ansible.builtin.assert:
      that:
        - NEW_IOS_VERSION == ansible_net_version

  - ansible.builtin.debug:
      msg:
        - "Cisco IOS-XE upgrade has been completed successfully"

  













        
