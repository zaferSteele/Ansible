---
##### 1
- name: Upgrade Cisco IOS-XE Routers
  hosts: ios_xe_routers
  gather_facts: true

  vars_files: vars.yml

  max_fail_percentage: 0

  tasks:
    - name: Check current IOS-XE version from gathered ios facts
      cisco.ios.ios_facts:

    - name: Debug current and new IOS versions
      ansible.builtin.debug:
        msg:
          - "Current version: {{ ansible_net_version }}"
          - "New version    : {{ new_ios_version }}"

    - name: Quit playbook if ansible_net_version equals new_ios_version or current IOS is newer
      block:
        - name: Fail if versions are equal or current IOS is newer
          ansible.builtin.fail:
            msg: "Current IOS version is already up to date."
          when: ansible_net_version >= new_ios_version
        - name: Debug Message
          ansible.builtin.debug:
            msg: "Continuing with playbook, upgrading IOS version..."
          ignore_errors: true

##### 2
- name: Create directories on SFTP server
  hosts: f38c1

  tasks:
    - name: Get ansible date/time facts
      ansible.builtin.setup:
        filter: "ansible_date_time"
        gather_subset: "!all"

    - name: Store DTG as a fact
      ansible.builtin.set_fact:
        DTG: "{{ ansible_date_time.date }}"

    - name: Create Directory for backup
      ansible.builtin.file:
        path: "~/ch15/{{ DTG }}"
        state: directory
        mode: "0775"
      run_once: true

##### 3
- name: Copy running configuration
  hosts: ios_xe_routers
  gather_facts: false

  vars_files: vars.yml

  vars:
    file_name: "ch15/{{ hostvars['f38c1'].DTG }}/{{ inventory_hostname }}-confg-0"
    command_timeout: 600

  tasks:
    - name: Copy running configuration
      ansible.netcommon.cli_command:
        command: "copy running-config sftp://{{ sftp_username }}:{{ sftp_password }}@{{ sftp_server_ip }}/{{ file_name }}"
        check_all: True
        prompt:
          - 'Address or name of remote host'
          - 'Destination username'
          - 'Destination filename'
        answer:
          - '{{ sftp_server_ip }}'
          - '{{ sftp_username }}'
          - '{{ file_name }}'
      register: copy_result

    - name: Display copy result
      ansible.builtin.debug:
        var: copy_result

###### 4
    - name: Save running-config to startup-config
      cisco.ios.ios_config:
        save_when: always

###### 5

    - name: Extend SSH timer to 99 mins
      cisco.ios.ios_config:
        commands:
          - line vty 0 15
          - exec-timeout 99 0

    - name: Copy new IOS from SFTP server 192.168.127.151
      ansible.netcommon.cli_command:
         command: 'copy sftp://{{ sftp_username }}:{{ sftp_password }}@{{ sftp_server_ip }}/{{ ios_file_name }} flash:/{{ ios_file_name }}'
         check_all: True
         prompt:
           - 'Destination filename'
         answer:
           - '{{ ios_file_name }}'

##### 6
    - name: Verify MD5 value on the flash
      cisco.ios.ios_command:
        commands: verify /md5 flash:{{ ios_file_name }} {{ios_file_md5 }}
      register: ios_file_md5_flash_result

    - ansible.builtin.debug:
        var: ios_file_md5_flash_result.stdout

    - name: Locate MD5 value of new IOS on router flash
      ansible.builtin.set_fact:
        ios_file_md5_flash: "{{ ios_file_md5_flash_result.stdout[0] | regex_search('[a-f0-9]{32}') }}"

    - ansible.builtin.debug:
        msg:
          - "ios_file_md5 [flash:/]          : {{ ios_file_md5_flash }}"
          - "ios_file_md5 [Correct Value]    : {{ ios_file_md5 }}"

    - name: Fail if MD5 Values are different
      ansible.builtin.fail: msg="Failed, flash IOS MD5 value DOES NOT MATCH the correct IOS file MD5 value. "
      when: ios_file_md5_flash != ios_file_md5 or 'Verified' not in ios_file_md5_flash_result.stdout[0]

    - name: Pass if MD5 values are the same
      ansible.builtin.debug:
        msg: Passed, flash IOS MD5 MATCH provided IOS file MD5.
      when: ios_file_md5_flash == ios_file_md5 and 'Verified' in ios_file_md5_flash_result.stdout[0]

##### 7
    - name: Clear the old boot variable
      cisco.ios.ios_config:
        commands:
          - "no boot system"
        save_when: always

    - name: Change the boot variable to new IOS image (.bin)
      cisco.ios.ios_config:
        commands:
          - "boot system flash:{{ ios_file_name }}"
        save_when: always

    - name: Run show boot command
      cisco.ios.ios_command:
        commands: show boot
        wait_for:
          - result[0] contains "{{ new_ios_version }}"
      register: show_boot1

    - ansible.builtin.debug:
       var: show_boot1.stdout_lines

##### 8
    - name: Save running-config to startup-config
      cisco.ios.ios_config:
        save_when: always

    - name: Reload the device
      cisco.ios.ios_command:
        commands:
          - command: "reload\r"
            prompt: 'Proceed with reload? [confirm]'
            answer: "\r"

##### 9
- name: Sleep for 5 minutes
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Pause for 5 minutes
      ansible.builtin.pause:
        seconds: 300
      run_once: true

##### 10
- name: Copy running configuration
  hosts: ios_xe_routers
  gather_facts: false

  vars_files: vars.yml

  vars:
    file_name: "ch15/{{ hostvars['f38c1'].DTG }}/{{ inventory_hostname }}-confg-1"
    command_timeout: 600

  tasks:
    - name: Restore SSH timer to default value, 10 mins
      cisco.ios.ios_config:
        commands:
          - line vty 0 15
          - exec-timeout 10 0
        save_when: modified

    - name: Copy running configuration
      ansible.netcommon.cli_command:
        command: "copy running-config sftp://{{ sftp_username }}:{{ sftp_password }}@{{ sftp_server_ip }}/{{ file_name }}"
        check_all: True
        prompt:
          - 'Address or name of remote host'
          - 'Destination username'
          - 'Destination filename'
        answer:
          - '{{ sftp_server_ip }}'
          - '{{ sftp_username }}'
          - '{{ file_name }}'
      register: copy_result

    - name: Display copy result
      ansible.builtin.debug:
        var: copy_result

    - name: Check the new IOS version.
      cisco.ios.ios_facts:

    - ansible.builtin.debug:
        msg:
          - "Current version is {{ ansible_net_version }}"

    - name: Assert that the new ios version is correct.
      vars:
        NEW_IOS_VERSION: "{{ new_ios_version }}"

      ansible.builtin.assert:
        that:
          - NEW_IOS_VERSION == ansible_net_version

    - ansible.builtin.debug:
        msg:
          - "Cisco IOS-XE upgrade has been completed successfully"
